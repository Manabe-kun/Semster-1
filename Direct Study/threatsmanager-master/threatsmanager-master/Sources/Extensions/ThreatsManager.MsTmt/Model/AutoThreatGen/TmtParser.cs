//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Tmt.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace ThreatsManager.MsTmt.Model.AutoThreatGen {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class TmtParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		PROPERTY=1, FLOW=2, SOURCE=3, TARGET=4, IS=5, CROSSES=6, AND=7, OR=8, 
		NOT=9, LPAREN=10, RPAREN=11, CHARACTER=12, CHARACTER_POINT=13, TEXT=14, 
		WHITESPACE=15;
	public const int
		RULE_parse = 0, RULE_expression = 1, RULE_operator = 2, RULE_boolean = 3, 
		RULE_subjectproperty = 4, RULE_subject = 5;
	public static readonly string[] ruleNames = {
		"parse", "expression", "operator", "boolean", "subjectproperty", "subject"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'flow'", "'source'", "'target'", "'is'", "'crosses'", "'and'", 
		"'or'", "'not'", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "PROPERTY", "FLOW", "SOURCE", "TARGET", "IS", "CROSSES", "AND", 
		"OR", "NOT", "LPAREN", "RPAREN", "CHARACTER", "CHARACTER_POINT", "TEXT", 
		"WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Tmt.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static TmtParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TmtParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TmtParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ParseContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(TmtParser.Eof, 0); }
		public ParseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parse; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITmtListener typedListener = listener as ITmtListener;
			if (typedListener != null) typedListener.EnterParse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITmtListener typedListener = listener as ITmtListener;
			if (typedListener != null) typedListener.ExitParse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITmtVisitor<TResult> typedVisitor = visitor as ITmtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParseContext parse() {
		ParseContext _localctx = new ParseContext(Context, State);
		EnterRule(_localctx, 0, RULE_parse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12; expression(0);
			State = 13; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SubjectExpressionContext : ExpressionContext {
		public SubjectContext left;
		public IToken op;
		public IToken right;
		public SubjectContext subject() {
			return GetRuleContext<SubjectContext>(0);
		}
		public ITerminalNode IS() { return GetToken(TmtParser.IS, 0); }
		public ITerminalNode TEXT() { return GetToken(TmtParser.TEXT, 0); }
		public SubjectExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITmtListener typedListener = listener as ITmtListener;
			if (typedListener != null) typedListener.EnterSubjectExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITmtListener typedListener = listener as ITmtListener;
			if (typedListener != null) typedListener.ExitSubjectExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITmtVisitor<TResult> typedVisitor = visitor as ITmtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubjectExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExpressionContext : ExpressionContext {
		public ITerminalNode NOT() { return GetToken(TmtParser.NOT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITmtListener typedListener = listener as ITmtListener;
			if (typedListener != null) typedListener.EnterNotExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITmtListener typedListener = listener as ITmtListener;
			if (typedListener != null) typedListener.ExitNotExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITmtVisitor<TResult> typedVisitor = visitor as ITmtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public BooleanContext op;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public BooleanExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITmtListener typedListener = listener as ITmtListener;
			if (typedListener != null) typedListener.EnterBooleanExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITmtListener typedListener = listener as ITmtListener;
			if (typedListener != null) typedListener.ExitBooleanExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITmtVisitor<TResult> typedVisitor = visitor as ITmtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PropertyExpressionContext : ExpressionContext {
		public SubjectpropertyContext left;
		public IToken op;
		public IToken right;
		public SubjectpropertyContext subjectproperty() {
			return GetRuleContext<SubjectpropertyContext>(0);
		}
		public ITerminalNode IS() { return GetToken(TmtParser.IS, 0); }
		public ITerminalNode TEXT() { return GetToken(TmtParser.TEXT, 0); }
		public PropertyExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITmtListener typedListener = listener as ITmtListener;
			if (typedListener != null) typedListener.EnterPropertyExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITmtListener typedListener = listener as ITmtListener;
			if (typedListener != null) typedListener.ExitPropertyExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITmtVisitor<TResult> typedVisitor = visitor as ITmtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FlowExpressionContext : ExpressionContext {
		public IToken left;
		public OperatorContext op;
		public IToken right;
		public ITerminalNode FLOW() { return GetToken(TmtParser.FLOW, 0); }
		public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		public ITerminalNode TEXT() { return GetToken(TmtParser.TEXT, 0); }
		public FlowExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITmtListener typedListener = listener as ITmtListener;
			if (typedListener != null) typedListener.EnterFlowExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITmtListener typedListener = listener as ITmtListener;
			if (typedListener != null) typedListener.ExitFlowExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITmtVisitor<TResult> typedVisitor = visitor as ITmtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlowExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParentExpressionContext : ExpressionContext {
		public ITerminalNode LPAREN() { return GetToken(TmtParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(TmtParser.RPAREN, 0); }
		public ParentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITmtListener typedListener = listener as ITmtListener;
			if (typedListener != null) typedListener.EnterParentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITmtListener typedListener = listener as ITmtListener;
			if (typedListener != null) typedListener.ExitParentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITmtVisitor<TResult> typedVisitor = visitor as ITmtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 34;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				{
				_localctx = new ParentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 16; Match(LPAREN);
				State = 17; expression(0);
				State = 18; Match(RPAREN);
				}
				break;
			case 2:
				{
				_localctx = new NotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 20; Match(NOT);
				State = 21; expression(5);
				}
				break;
			case 3:
				{
				_localctx = new PropertyExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 22; ((PropertyExpressionContext)_localctx).left = subjectproperty();
				State = 23; ((PropertyExpressionContext)_localctx).op = Match(IS);
				State = 24; ((PropertyExpressionContext)_localctx).right = Match(TEXT);
				}
				break;
			case 4:
				{
				_localctx = new SubjectExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 26; ((SubjectExpressionContext)_localctx).left = subject();
				State = 27; ((SubjectExpressionContext)_localctx).op = Match(IS);
				State = 28; ((SubjectExpressionContext)_localctx).right = Match(TEXT);
				}
				break;
			case 5:
				{
				_localctx = new FlowExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 30; ((FlowExpressionContext)_localctx).left = Match(FLOW);
				State = 31; ((FlowExpressionContext)_localctx).op = @operator();
				State = 32; ((FlowExpressionContext)_localctx).right = Match(TEXT);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 42;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BooleanExpressionContext(new ExpressionContext(_parentctx, _parentState));
					((BooleanExpressionContext)_localctx).left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_expression);
					State = 36;
					if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
					State = 37; ((BooleanExpressionContext)_localctx).op = boolean();
					State = 38; ((BooleanExpressionContext)_localctx).right = expression(5);
					}
					} 
				}
				State = 44;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		public ITerminalNode IS() { return GetToken(TmtParser.IS, 0); }
		public ITerminalNode CROSSES() { return GetToken(TmtParser.CROSSES, 0); }
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITmtListener typedListener = listener as ITmtListener;
			if (typedListener != null) typedListener.EnterOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITmtListener typedListener = listener as ITmtListener;
			if (typedListener != null) typedListener.ExitOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITmtVisitor<TResult> typedVisitor = visitor as ITmtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(Context, State);
		EnterRule(_localctx, 4, RULE_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45;
			_la = TokenStream.LA(1);
			if ( !(_la==IS || _la==CROSSES) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		public ITerminalNode AND() { return GetToken(TmtParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(TmtParser.OR, 0); }
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITmtListener typedListener = listener as ITmtListener;
			if (typedListener != null) typedListener.EnterBoolean(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITmtListener typedListener = listener as ITmtListener;
			if (typedListener != null) typedListener.ExitBoolean(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITmtVisitor<TResult> typedVisitor = visitor as ITmtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 6, RULE_boolean);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47;
			_la = TokenStream.LA(1);
			if ( !(_la==AND || _la==OR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubjectpropertyContext : ParserRuleContext {
		public ITerminalNode PROPERTY() { return GetToken(TmtParser.PROPERTY, 0); }
		public ITerminalNode FLOW() { return GetToken(TmtParser.FLOW, 0); }
		public SubjectContext subject() {
			return GetRuleContext<SubjectContext>(0);
		}
		public SubjectpropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subjectproperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITmtListener typedListener = listener as ITmtListener;
			if (typedListener != null) typedListener.EnterSubjectproperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITmtListener typedListener = listener as ITmtListener;
			if (typedListener != null) typedListener.ExitSubjectproperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITmtVisitor<TResult> typedVisitor = visitor as ITmtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubjectproperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubjectpropertyContext subjectproperty() {
		SubjectpropertyContext _localctx = new SubjectpropertyContext(Context, State);
		EnterRule(_localctx, 8, RULE_subjectproperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FLOW:
				{
				State = 49; Match(FLOW);
				}
				break;
			case SOURCE:
			case TARGET:
				{
				State = 50; subject();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 53; Match(PROPERTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubjectContext : ParserRuleContext {
		public ITerminalNode SOURCE() { return GetToken(TmtParser.SOURCE, 0); }
		public ITerminalNode TARGET() { return GetToken(TmtParser.TARGET, 0); }
		public SubjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subject; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITmtListener typedListener = listener as ITmtListener;
			if (typedListener != null) typedListener.EnterSubject(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITmtListener typedListener = listener as ITmtListener;
			if (typedListener != null) typedListener.ExitSubject(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITmtVisitor<TResult> typedVisitor = visitor as ITmtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubjectContext subject() {
		SubjectContext _localctx = new SubjectContext(Context, State);
		EnterRule(_localctx, 10, RULE_subject);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			_la = TokenStream.LA(1);
			if ( !(_la==SOURCE || _la==TARGET) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 4);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x11', '<', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x5', '\x3', '%', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\a', '\x3', '+', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 
		'.', '\v', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x36', '\n', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x2', '\x3', 
		'\x4', '\b', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\x2', '\x5', '\x3', 
		'\x2', '\a', '\b', '\x3', '\x2', '\t', '\n', '\x3', '\x2', '\x5', '\x6', 
		'\x2', ';', '\x2', '\xE', '\x3', '\x2', '\x2', '\x2', '\x4', '$', '\x3', 
		'\x2', '\x2', '\x2', '\x6', '/', '\x3', '\x2', '\x2', '\x2', '\b', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '\n', '\x35', '\x3', '\x2', '\x2', '\x2', 
		'\f', '\x39', '\x3', '\x2', '\x2', '\x2', '\xE', '\xF', '\x5', '\x4', 
		'\x3', '\x2', '\xF', '\x10', '\a', '\x2', '\x2', '\x3', '\x10', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\x11', '\x12', '\b', '\x3', '\x1', '\x2', 
		'\x12', '\x13', '\a', '\f', '\x2', '\x2', '\x13', '\x14', '\x5', '\x4', 
		'\x3', '\x2', '\x14', '\x15', '\a', '\r', '\x2', '\x2', '\x15', '%', '\x3', 
		'\x2', '\x2', '\x2', '\x16', '\x17', '\a', '\v', '\x2', '\x2', '\x17', 
		'%', '\x5', '\x4', '\x3', '\a', '\x18', '\x19', '\x5', '\n', '\x6', '\x2', 
		'\x19', '\x1A', '\a', '\a', '\x2', '\x2', '\x1A', '\x1B', '\a', '\x10', 
		'\x2', '\x2', '\x1B', '%', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1D', 
		'\x5', '\f', '\a', '\x2', '\x1D', '\x1E', '\a', '\a', '\x2', '\x2', '\x1E', 
		'\x1F', '\a', '\x10', '\x2', '\x2', '\x1F', '%', '\x3', '\x2', '\x2', 
		'\x2', ' ', '!', '\a', '\x4', '\x2', '\x2', '!', '\"', '\x5', '\x6', '\x4', 
		'\x2', '\"', '#', '\a', '\x10', '\x2', '\x2', '#', '%', '\x3', '\x2', 
		'\x2', '\x2', '$', '\x11', '\x3', '\x2', '\x2', '\x2', '$', '\x16', '\x3', 
		'\x2', '\x2', '\x2', '$', '\x18', '\x3', '\x2', '\x2', '\x2', '$', '\x1C', 
		'\x3', '\x2', '\x2', '\x2', '$', ' ', '\x3', '\x2', '\x2', '\x2', '%', 
		',', '\x3', '\x2', '\x2', '\x2', '&', '\'', '\f', '\x6', '\x2', '\x2', 
		'\'', '(', '\x5', '\b', '\x5', '\x2', '(', ')', '\x5', '\x4', '\x3', '\a', 
		')', '+', '\x3', '\x2', '\x2', '\x2', '*', '&', '\x3', '\x2', '\x2', '\x2', 
		'+', '.', '\x3', '\x2', '\x2', '\x2', ',', '*', '\x3', '\x2', '\x2', '\x2', 
		',', '-', '\x3', '\x2', '\x2', '\x2', '-', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '.', ',', '\x3', '\x2', '\x2', '\x2', '/', '\x30', '\t', '\x2', 
		'\x2', '\x2', '\x30', '\a', '\x3', '\x2', '\x2', '\x2', '\x31', '\x32', 
		'\t', '\x3', '\x2', '\x2', '\x32', '\t', '\x3', '\x2', '\x2', '\x2', '\x33', 
		'\x36', '\a', '\x4', '\x2', '\x2', '\x34', '\x36', '\x5', '\f', '\a', 
		'\x2', '\x35', '\x33', '\x3', '\x2', '\x2', '\x2', '\x35', '\x34', '\x3', 
		'\x2', '\x2', '\x2', '\x36', '\x37', '\x3', '\x2', '\x2', '\x2', '\x37', 
		'\x38', '\a', '\x3', '\x2', '\x2', '\x38', '\v', '\x3', '\x2', '\x2', 
		'\x2', '\x39', ':', '\t', '\x4', '\x2', '\x2', ':', '\r', '\x3', '\x2', 
		'\x2', '\x2', '\x5', '$', ',', '\x35',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace ThreatsManager.MsTmt.Model.AutoThreatGen
