using System;
using System.Collections.Generic;

namespace ThreatsManager.Interfaces.ObjectModel.ThreatsMitigations
{
    /// <summary>
    /// Interface implemented by the containers of associations between Vulnerabilities and Mitigations.
    /// </summary>
    public interface IVulnerabilityMitigationsContainer
    {
        /// <summary>
        /// Event raised when a Vulnerability Mitigation is added to the Container.
        /// </summary>
        event Action<IVulnerabilityMitigationsContainer, IVulnerabilityMitigation> VulnerabilityMitigationAdded;

        /// <summary>
        /// Event raised when a Vulnerability Mitigation is removed from the Container.
        /// </summary>
        event Action<IVulnerabilityMitigationsContainer, IVulnerabilityMitigation> VulnerabilityMitigationRemoved;

        /// <summary>
        /// Enumeration of the associated mitigations.
        /// </summary>
        IEnumerable<IVulnerabilityMitigation> Mitigations { get; }

        /// <summary>
        /// Get a Vulnerability Mitigation association identified by the identifier of the Mitigation.
        /// </summary>
        /// <param name="mitigationId">Identifier of the Mitigation.</param>
        /// <returns>Vulnerability Mitigation association if found, otherwise null.</returns>
        IVulnerabilityMitigation GetMitigation(Guid mitigationId);
                
        /// <summary>
        /// Adds the Vulnerability Mitigation passed as argument to the container.
        /// </summary>
        /// <param name="mitigation">Vulnerability Mitigation to be added to the container.</param>
        /// <exception cref="ArgumentException">The argument is not associated to the same Threat Model of the Container.</exception>
        void Add(IVulnerabilityMitigation mitigation);

        /// <summary>
        /// Creates a Vulnerability Mitigation association.
        /// </summary>
        /// <param name="mitigation">Mitigation to be associated to the Vulnerability.</param>
        /// <param name="strength">Strength of the Mitigation.</param>
        /// <param name="status">Status of the mitigation</param>
        /// <param name="directives">Additional directives for the mitigation, specific to the Vulnerability.</param>
        /// <returns>New instance of Vulnerability Mitigation association if the Mitigation is not already associated, otherwise null.</returns>
        IVulnerabilityMitigation AddMitigation(IMitigation mitigation, 
            IStrength strength, MitigationStatus status = MitigationStatus.Proposed, string directives = null);

        /// <summary>
        /// Removes the association with a given Mitigation.
        /// </summary>
        /// <param name="mitigationId">Identifier of the Mitigation to be de-associated.</param>
        /// <returns>True if the operation succeeds, otherwise false.</returns>
        /// <remarks>It does not remove the related standard Mitigation, but only the specific Vulnerability Mitigation.</remarks>
        bool RemoveMitigation(Guid mitigationId);
    }
}